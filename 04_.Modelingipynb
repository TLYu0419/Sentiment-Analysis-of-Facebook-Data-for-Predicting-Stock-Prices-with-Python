{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "99b51336-e9eb-43c7-93a4-eaa2fe1073b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-09T04:58:44.203620Z",
     "iopub.status.busy": "2022-04-09T04:58:44.203090Z",
     "iopub.status.idle": "2022-04-09T04:58:44.206644Z",
     "shell.execute_reply": "2022-04-09T04:58:44.206015Z",
     "shell.execute_reply.started": "2022-04-09T04:58:44.203563Z"
    }
   },
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3e6dc1a-c948-4ae6-b8d5-8d72c0440591",
   "metadata": {},
   "source": [
    "## Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "44b01bf0-d9ac-4f6c-965a-430b1c2da447",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-12T15:25:19.219910Z",
     "iopub.status.busy": "2022-04-12T15:25:19.219451Z",
     "iopub.status.idle": "2022-04-12T15:25:19.227170Z",
     "shell.execute_reply": "2022-04-12T15:25:19.226045Z",
     "shell.execute_reply.started": "2022-04-12T15:25:19.219840Z"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !pip install statsmodels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1fb2b963-504f-44ff-b88b-3e3bfbad87b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:12:32.666023Z",
     "iopub.status.busy": "2022-04-18T05:12:32.664999Z",
     "iopub.status.idle": "2022-04-18T05:12:32.948837Z",
     "shell.execute_reply": "2022-04-18T05:12:32.948232Z",
     "shell.execute_reply.started": "2022-04-18T05:12:32.665939Z"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import datetime\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from statsmodels.tsa.stattools import grangercausalitytests\n",
    "\n",
    "from sklearn.linear_model import LinearRegression, LogisticRegression\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_absolute_percentage_error\n",
    "\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "import statsmodels.api as sm\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b9e5e163-5b95-49bd-bd1c-7d518bb2f3d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:55:59.867460Z",
     "iopub.status.busy": "2022-04-18T04:55:59.867206Z",
     "iopub.status.idle": "2022-04-18T04:55:59.871003Z",
     "shell.execute_reply": "2022-04-18T04:55:59.870241Z",
     "shell.execute_reply.started": "2022-04-18T04:55:59.867443Z"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 100)\n",
    "# pd.set_option('display.max_rows', 300)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9479cc1e-f738-4c4d-9ada-6a2506bec712",
   "metadata": {},
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d060ad30-cc41-4337-a95a-15b7229b48bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:56:09.332808Z",
     "iopub.status.busy": "2022-04-18T04:56:09.332239Z",
     "iopub.status.idle": "2022-04-18T04:56:09.359855Z",
     "shell.execute_reply": "2022-04-18T04:56:09.359031Z",
     "shell.execute_reply.started": "2022-04-18T04:56:09.332741Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-01</td>\n",
       "      <td>17162.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-02</td>\n",
       "      <td>17165.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-03</td>\n",
       "      <td>17246.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-04</td>\n",
       "      <td>17147.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-05</td>\n",
       "      <td>17115.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>2022-03-28</td>\n",
       "      <td>17520.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>2022-03-29</td>\n",
       "      <td>17548.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>2022-03-30</td>\n",
       "      <td>17740.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>17693.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>2022-04-01</td>\n",
       "      <td>17625.59</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>305 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE  CLOSING_INDEX\n",
       "0    2021-06-01       17162.38\n",
       "1    2021-06-02       17165.04\n",
       "2    2021-06-03       17246.16\n",
       "3    2021-06-04       17147.41\n",
       "4    2021-06-05       17115.66\n",
       "..          ...            ...\n",
       "300  2022-03-28       17520.01\n",
       "301  2022-03-29       17548.66\n",
       "302  2022-03-30       17740.56\n",
       "303  2022-03-31       17693.47\n",
       "304  2022-04-01       17625.59\n",
       "\n",
       "[305 rows x 2 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stock_price = pd.read_pickle('./stock_price_by_date.pickle')\n",
    "stock_price['DATE'] = stock_price['DATE'].apply(lambda x: x.strftime('%Y-%m-%d'))\n",
    "stock_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d43ba67c-9d93-4a3d-85c5-52ddfe957ce6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:56:11.370687Z",
     "iopub.status.busy": "2022-04-18T04:56:11.370031Z",
     "iopub.status.idle": "2022-04-18T04:56:11.383911Z",
     "shell.execute_reply": "2022-04-18T04:56:11.382956Z",
     "shell.execute_reply.started": "2022-04-18T04:56:11.370658Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-01</td>\n",
       "      <td>28224</td>\n",
       "      <td>3022</td>\n",
       "      <td>230</td>\n",
       "      <td>473</td>\n",
       "      <td>194</td>\n",
       "      <td>481</td>\n",
       "      <td>224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-02</td>\n",
       "      <td>22951</td>\n",
       "      <td>709</td>\n",
       "      <td>98</td>\n",
       "      <td>310</td>\n",
       "      <td>50</td>\n",
       "      <td>104</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-03</td>\n",
       "      <td>22127</td>\n",
       "      <td>1526</td>\n",
       "      <td>203</td>\n",
       "      <td>306</td>\n",
       "      <td>103</td>\n",
       "      <td>266</td>\n",
       "      <td>1486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-04</td>\n",
       "      <td>25506</td>\n",
       "      <td>1257</td>\n",
       "      <td>307</td>\n",
       "      <td>271</td>\n",
       "      <td>117</td>\n",
       "      <td>138</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-05</td>\n",
       "      <td>12475</td>\n",
       "      <td>406</td>\n",
       "      <td>78</td>\n",
       "      <td>114</td>\n",
       "      <td>25</td>\n",
       "      <td>38</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>2022-03-27</td>\n",
       "      <td>71832</td>\n",
       "      <td>23247</td>\n",
       "      <td>453</td>\n",
       "      <td>1422</td>\n",
       "      <td>133</td>\n",
       "      <td>38</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>2022-03-28</td>\n",
       "      <td>45144</td>\n",
       "      <td>4684</td>\n",
       "      <td>276</td>\n",
       "      <td>995</td>\n",
       "      <td>570</td>\n",
       "      <td>86</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>2022-03-29</td>\n",
       "      <td>61967</td>\n",
       "      <td>4388</td>\n",
       "      <td>408</td>\n",
       "      <td>821</td>\n",
       "      <td>185</td>\n",
       "      <td>90</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>2022-03-30</td>\n",
       "      <td>62775</td>\n",
       "      <td>6123</td>\n",
       "      <td>631</td>\n",
       "      <td>1495</td>\n",
       "      <td>242</td>\n",
       "      <td>266</td>\n",
       "      <td>775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>45174</td>\n",
       "      <td>6917</td>\n",
       "      <td>879</td>\n",
       "      <td>756</td>\n",
       "      <td>610</td>\n",
       "      <td>269</td>\n",
       "      <td>165</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>304 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE   LIKE   HAHA  LOVE   WOW  CARE  ANGRY   SAD\n",
       "0    2021-06-01  28224   3022   230   473   194    481   224\n",
       "1    2021-06-02  22951    709    98   310    50    104    94\n",
       "2    2021-06-03  22127   1526   203   306   103    266  1486\n",
       "3    2021-06-04  25506   1257   307   271   117    138    63\n",
       "4    2021-06-05  12475    406    78   114    25     38    27\n",
       "..          ...    ...    ...   ...   ...   ...    ...   ...\n",
       "299  2022-03-27  71832  23247   453  1422   133     38   113\n",
       "300  2022-03-28  45144   4684   276   995   570     86   109\n",
       "301  2022-03-29  61967   4388   408   821   185     90   197\n",
       "302  2022-03-30  62775   6123   631  1495   242    266   775\n",
       "303  2022-03-31  45174   6917   879   756   610    269   165\n",
       "\n",
       "[304 rows x 8 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentiment = pd.read_pickle('./sentiment_by_date.pickle')\n",
    "sentiment = sentiment.reset_index()\n",
    "sentiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f8b0ead8-191a-4dde-8114-f41223ebbb14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:56:13.414344Z",
     "iopub.status.busy": "2022-04-18T04:56:13.413694Z",
     "iopub.status.idle": "2022-04-18T04:56:13.434473Z",
     "shell.execute_reply": "2022-04-18T04:56:13.433583Z",
     "shell.execute_reply.started": "2022-04-18T04:56:13.414314Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-01</td>\n",
       "      <td>17162.38</td>\n",
       "      <td>28224.0</td>\n",
       "      <td>3022.0</td>\n",
       "      <td>230.0</td>\n",
       "      <td>473.0</td>\n",
       "      <td>194.0</td>\n",
       "      <td>481.0</td>\n",
       "      <td>224.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-02</td>\n",
       "      <td>17165.04</td>\n",
       "      <td>22951.0</td>\n",
       "      <td>709.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>310.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>94.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-03</td>\n",
       "      <td>17246.16</td>\n",
       "      <td>22127.0</td>\n",
       "      <td>1526.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>306.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>1486.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-04</td>\n",
       "      <td>17147.41</td>\n",
       "      <td>25506.0</td>\n",
       "      <td>1257.0</td>\n",
       "      <td>307.0</td>\n",
       "      <td>271.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-05</td>\n",
       "      <td>17115.66</td>\n",
       "      <td>12475.0</td>\n",
       "      <td>406.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>2022-03-28</td>\n",
       "      <td>17520.01</td>\n",
       "      <td>45144.0</td>\n",
       "      <td>4684.0</td>\n",
       "      <td>276.0</td>\n",
       "      <td>995.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>109.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>2022-03-29</td>\n",
       "      <td>17548.66</td>\n",
       "      <td>61967.0</td>\n",
       "      <td>4388.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>821.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>197.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>2022-03-30</td>\n",
       "      <td>17740.56</td>\n",
       "      <td>62775.0</td>\n",
       "      <td>6123.0</td>\n",
       "      <td>631.0</td>\n",
       "      <td>1495.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>775.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>17693.47</td>\n",
       "      <td>45174.0</td>\n",
       "      <td>6917.0</td>\n",
       "      <td>879.0</td>\n",
       "      <td>756.0</td>\n",
       "      <td>610.0</td>\n",
       "      <td>269.0</td>\n",
       "      <td>165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>2022-04-01</td>\n",
       "      <td>17625.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>305 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE  CLOSING_INDEX     LIKE    HAHA   LOVE     WOW   CARE  ANGRY  \\\n",
       "0    2021-06-01       17162.38  28224.0  3022.0  230.0   473.0  194.0  481.0   \n",
       "1    2021-06-02       17165.04  22951.0   709.0   98.0   310.0   50.0  104.0   \n",
       "2    2021-06-03       17246.16  22127.0  1526.0  203.0   306.0  103.0  266.0   \n",
       "3    2021-06-04       17147.41  25506.0  1257.0  307.0   271.0  117.0  138.0   \n",
       "4    2021-06-05       17115.66  12475.0   406.0   78.0   114.0   25.0   38.0   \n",
       "..          ...            ...      ...     ...    ...     ...    ...    ...   \n",
       "300  2022-03-28       17520.01  45144.0  4684.0  276.0   995.0  570.0   86.0   \n",
       "301  2022-03-29       17548.66  61967.0  4388.0  408.0   821.0  185.0   90.0   \n",
       "302  2022-03-30       17740.56  62775.0  6123.0  631.0  1495.0  242.0  266.0   \n",
       "303  2022-03-31       17693.47  45174.0  6917.0  879.0   756.0  610.0  269.0   \n",
       "304  2022-04-01       17625.59      NaN     NaN    NaN     NaN    NaN    NaN   \n",
       "\n",
       "        SAD  \n",
       "0     224.0  \n",
       "1      94.0  \n",
       "2    1486.0  \n",
       "3      63.0  \n",
       "4      27.0  \n",
       "..      ...  \n",
       "300   109.0  \n",
       "301   197.0  \n",
       "302   775.0  \n",
       "303   165.0  \n",
       "304     NaN  \n",
       "\n",
       "[305 rows x 9 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(left=stock_price, right=sentiment, how='left', on='DATE')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8c2b77a1-a519-44b1-85b8-7ce981680848",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:56:20.314280Z",
     "iopub.status.busy": "2022-04-18T04:56:20.313504Z",
     "iopub.status.idle": "2022-04-18T04:56:20.325516Z",
     "shell.execute_reply": "2022-04-18T04:56:20.324557Z",
     "shell.execute_reply.started": "2022-04-18T04:56:20.314232Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2022-03-31\n",
      "2021-12-01\n"
     ]
    }
   ],
   "source": [
    "df = df.loc[df['DATE'].apply(lambda x: '2021-12-01' <= x <= '2022-03-31')]\n",
    "print(df['DATE'].max())\n",
    "print(df['DATE'].min())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d3ad6f3-b213-41be-933c-1c5a5f25a15a",
   "metadata": {},
   "source": [
    "## Granger causality\n",
    "- The Granger Causality test is used to determine whether or not one time series is useful for forecasting another.\n",
    "- Examine the different kind of sentiments would can be utilized to predict the stock price\n",
    "  - If so, how many days we need to observed\n",
    "  - If not, we can change other sentiment analysis method to extract Facebook sentiment.\n",
    "- https://www.statology.org/granger-causality-test-in-python/\n",
    "- https://www.youtube.com/watch?v=4TkNZviNJC0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c81b4346-2e60-444e-a1d8-7a92901a4053",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:56:28.344497Z",
     "iopub.status.busy": "2022-04-18T04:56:28.344083Z",
     "iopub.status.idle": "2022-04-18T04:56:28.364881Z",
     "shell.execute_reply": "2022-04-18T04:56:28.364131Z",
     "shell.execute_reply.started": "2022-04-18T04:56:28.344479Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-0.881824</td>\n",
       "      <td>-0.669657</td>\n",
       "      <td>-0.334230</td>\n",
       "      <td>-0.341884</td>\n",
       "      <td>-0.637723</td>\n",
       "      <td>-0.473810</td>\n",
       "      <td>-0.343242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-02</th>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.861455</td>\n",
       "      <td>-0.506706</td>\n",
       "      <td>-0.352323</td>\n",
       "      <td>-0.485300</td>\n",
       "      <td>-0.660525</td>\n",
       "      <td>-0.473810</td>\n",
       "      <td>-0.226670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-03</th>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.808711</td>\n",
       "      <td>-0.553602</td>\n",
       "      <td>-0.305493</td>\n",
       "      <td>-0.566134</td>\n",
       "      <td>-0.611664</td>\n",
       "      <td>-0.624865</td>\n",
       "      <td>-0.362425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-04</th>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-0.953796</td>\n",
       "      <td>-0.617834</td>\n",
       "      <td>-0.361902</td>\n",
       "      <td>-0.593079</td>\n",
       "      <td>-0.673554</td>\n",
       "      <td>-0.380854</td>\n",
       "      <td>-0.278316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-05</th>\n",
       "      <td>-0.511819</td>\n",
       "      <td>-0.908750</td>\n",
       "      <td>-0.729874</td>\n",
       "      <td>-0.356581</td>\n",
       "      <td>-0.602640</td>\n",
       "      <td>-0.647495</td>\n",
       "      <td>-0.613246</td>\n",
       "      <td>-0.380132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-27</th>\n",
       "      <td>-0.883630</td>\n",
       "      <td>0.926228</td>\n",
       "      <td>3.405226</td>\n",
       "      <td>-0.155423</td>\n",
       "      <td>0.502095</td>\n",
       "      <td>-0.334785</td>\n",
       "      <td>-0.520289</td>\n",
       "      <td>-0.242901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-28</th>\n",
       "      <td>-0.994822</td>\n",
       "      <td>0.080806</td>\n",
       "      <td>0.017914</td>\n",
       "      <td>-0.249616</td>\n",
       "      <td>0.130953</td>\n",
       "      <td>1.088697</td>\n",
       "      <td>-0.241419</td>\n",
       "      <td>-0.248804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-29</th>\n",
       "      <td>-0.913628</td>\n",
       "      <td>0.613725</td>\n",
       "      <td>-0.036099</td>\n",
       "      <td>-0.179370</td>\n",
       "      <td>-0.020286</td>\n",
       "      <td>-0.165400</td>\n",
       "      <td>-0.218179</td>\n",
       "      <td>-0.118951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-30</th>\n",
       "      <td>-0.369787</td>\n",
       "      <td>0.639320</td>\n",
       "      <td>0.280498</td>\n",
       "      <td>-0.060697</td>\n",
       "      <td>0.565545</td>\n",
       "      <td>0.020271</td>\n",
       "      <td>0.804345</td>\n",
       "      <td>0.733948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-31</th>\n",
       "      <td>-0.503239</td>\n",
       "      <td>0.081757</td>\n",
       "      <td>0.425384</td>\n",
       "      <td>0.071279</td>\n",
       "      <td>-0.076783</td>\n",
       "      <td>1.218993</td>\n",
       "      <td>0.821774</td>\n",
       "      <td>-0.166170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>121 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            CLOSING_INDEX      LIKE      HAHA      LOVE       WOW      CARE  \\\n",
       "DATE                                                                          \n",
       "2021-12-01      -0.807836 -0.881824 -0.669657 -0.334230 -0.341884 -0.637723   \n",
       "2021-12-02      -0.414224 -0.861455 -0.506706 -0.352323 -0.485300 -0.660525   \n",
       "2021-12-03      -0.492838 -0.808711 -0.553602 -0.305493 -0.566134 -0.611664   \n",
       "2021-12-04      -0.505492 -0.953796 -0.617834 -0.361902 -0.593079 -0.673554   \n",
       "2021-12-05      -0.511819 -0.908750 -0.729874 -0.356581 -0.602640 -0.647495   \n",
       "...                   ...       ...       ...       ...       ...       ...   \n",
       "2022-03-27      -0.883630  0.926228  3.405226 -0.155423  0.502095 -0.334785   \n",
       "2022-03-28      -0.994822  0.080806  0.017914 -0.249616  0.130953  1.088697   \n",
       "2022-03-29      -0.913628  0.613725 -0.036099 -0.179370 -0.020286 -0.165400   \n",
       "2022-03-30      -0.369787  0.639320  0.280498 -0.060697  0.565545  0.020271   \n",
       "2022-03-31      -0.503239  0.081757  0.425384  0.071279 -0.076783  1.218993   \n",
       "\n",
       "               ANGRY       SAD  \n",
       "DATE                            \n",
       "2021-12-01 -0.473810 -0.343242  \n",
       "2021-12-02 -0.473810 -0.226670  \n",
       "2021-12-03 -0.624865 -0.362425  \n",
       "2021-12-04 -0.380854 -0.278316  \n",
       "2021-12-05 -0.613246 -0.380132  \n",
       "...              ...       ...  \n",
       "2022-03-27 -0.520289 -0.242901  \n",
       "2022-03-28 -0.241419 -0.248804  \n",
       "2022-03-29 -0.218179 -0.118951  \n",
       "2022-03-30  0.804345  0.733948  \n",
       "2022-03-31  0.821774 -0.166170  \n",
       "\n",
       "[121 rows x 8 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std = StandardScaler()\n",
    "columns = ['CLOSING_INDEX', 'LIKE', 'HAHA', 'LOVE', 'WOW', 'CARE', 'ANGRY', 'SAD']\n",
    "df = pd.DataFrame(std.fit_transform(df[columns]), columns=columns, index=df['DATE'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7e2caf26-c7f4-4b45-8745-a45b97d12c48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:56:33.146560Z",
     "iopub.status.busy": "2022-04-18T04:56:33.146141Z",
     "iopub.status.idle": "2022-04-18T04:56:33.303934Z",
     "shell.execute_reply": "2022-04-18T04:56:33.303105Z",
     "shell.execute_reply.started": "2022-04-18T04:56:33.146535Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======================= Z_LIKE =======================\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=4.4891  , p=0.0362  , df_denom=117, df_num=1\n",
      "ssr based chi2 test:   chi2=4.6042  , p=0.0319  , df=1\n",
      "likelihood ratio test: chi2=4.5180  , p=0.0335  , df=1\n",
      "parameter F test:         F=4.4891  , p=0.0362  , df_denom=117, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=2.0771  , p=0.1300  , df_denom=114, df_num=2\n",
      "ssr based chi2 test:   chi2=4.3364  , p=0.1144  , df=2\n",
      "likelihood ratio test: chi2=4.2592  , p=0.1189  , df=2\n",
      "parameter F test:         F=2.0771  , p=0.1300  , df_denom=114, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=1.5143  , p=0.2148  , df_denom=111, df_num=3\n",
      "ssr based chi2 test:   chi2=4.8293  , p=0.1847  , df=3\n",
      "likelihood ratio test: chi2=4.7331  , p=0.1924  , df=3\n",
      "parameter F test:         F=1.5143  , p=0.2148  , df_denom=111, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=2.0302  , p=0.0952  , df_denom=108, df_num=4\n",
      "ssr based chi2 test:   chi2=8.7974  , p=0.0664  , df=4\n",
      "likelihood ratio test: chi2=8.4824  , p=0.0754  , df=4\n",
      "parameter F test:         F=2.0302  , p=0.0952  , df_denom=108, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=1.6616  , p=0.1503  , df_denom=105, df_num=5\n",
      "ssr based chi2 test:   chi2=9.1784  , p=0.1022  , df=5\n",
      "likelihood ratio test: chi2=8.8334  , p=0.1159  , df=5\n",
      "parameter F test:         F=1.6616  , p=0.1503  , df_denom=105, df_num=5\n",
      "======================= Z_HAHA =======================\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=2.5201  , p=0.1151  , df_denom=117, df_num=1\n",
      "ssr based chi2 test:   chi2=2.5847  , p=0.1079  , df=1\n",
      "likelihood ratio test: chi2=2.5572  , p=0.1098  , df=1\n",
      "parameter F test:         F=2.5201  , p=0.1151  , df_denom=117, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=1.9907  , p=0.1413  , df_denom=114, df_num=2\n",
      "ssr based chi2 test:   chi2=4.1560  , p=0.1252  , df=2\n",
      "likelihood ratio test: chi2=4.0851  , p=0.1297  , df=2\n",
      "parameter F test:         F=1.9907  , p=0.1413  , df_denom=114, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=1.3661  , p=0.2569  , df_denom=111, df_num=3\n",
      "ssr based chi2 test:   chi2=4.3568  , p=0.2254  , df=3\n",
      "likelihood ratio test: chi2=4.2783  , p=0.2329  , df=3\n",
      "parameter F test:         F=1.3661  , p=0.2569  , df_denom=111, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=1.0691  , p=0.3754  , df_denom=108, df_num=4\n",
      "ssr based chi2 test:   chi2=4.6329  , p=0.3271  , df=4\n",
      "likelihood ratio test: chi2=4.5435  , p=0.3374  , df=4\n",
      "parameter F test:         F=1.0691  , p=0.3754  , df_denom=108, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=1.3048  , p=0.2676  , df_denom=105, df_num=5\n",
      "ssr based chi2 test:   chi2=7.2073  , p=0.2057  , df=5\n",
      "likelihood ratio test: chi2=6.9923  , p=0.2212  , df=5\n",
      "parameter F test:         F=1.3048  , p=0.2676  , df_denom=105, df_num=5\n",
      "======================= Z_LOVE =======================\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=3.3645  , p=0.0692  , df_denom=117, df_num=1\n",
      "ssr based chi2 test:   chi2=3.4508  , p=0.0632  , df=1\n",
      "likelihood ratio test: chi2=3.4021  , p=0.0651  , df=1\n",
      "parameter F test:         F=3.3645  , p=0.0692  , df_denom=117, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=1.7837  , p=0.1727  , df_denom=114, df_num=2\n",
      "ssr based chi2 test:   chi2=3.7240  , p=0.1554  , df=2\n",
      "likelihood ratio test: chi2=3.6669  , p=0.1599  , df=2\n",
      "parameter F test:         F=1.7837  , p=0.1727  , df_denom=114, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=1.5546  , p=0.2045  , df_denom=111, df_num=3\n",
      "ssr based chi2 test:   chi2=4.9580  , p=0.1749  , df=3\n",
      "likelihood ratio test: chi2=4.8566  , p=0.1826  , df=3\n",
      "parameter F test:         F=1.5546  , p=0.2045  , df_denom=111, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=1.2626  , p=0.2892  , df_denom=108, df_num=4\n",
      "ssr based chi2 test:   chi2=5.4712  , p=0.2423  , df=4\n",
      "likelihood ratio test: chi2=5.3472  , p=0.2535  , df=4\n",
      "parameter F test:         F=1.2626  , p=0.2892  , df_denom=108, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=1.1063  , p=0.3616  , df_denom=105, df_num=5\n",
      "ssr based chi2 test:   chi2=6.1111  , p=0.2956  , df=5\n",
      "likelihood ratio test: chi2=5.9555  , p=0.3106  , df=5\n",
      "parameter F test:         F=1.1063  , p=0.3616  , df_denom=105, df_num=5\n",
      "======================= Z_WOW========================\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=3.3365  , p=0.0703  , df_denom=117, df_num=1\n",
      "ssr based chi2 test:   chi2=3.4221  , p=0.0643  , df=1\n",
      "likelihood ratio test: chi2=3.3742  , p=0.0662  , df=1\n",
      "parameter F test:         F=3.3365  , p=0.0703  , df_denom=117, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=1.6501  , p=0.1966  , df_denom=114, df_num=2\n",
      "ssr based chi2 test:   chi2=3.4449  , p=0.1786  , df=2\n",
      "likelihood ratio test: chi2=3.3960  , p=0.1830  , df=2\n",
      "parameter F test:         F=1.6501  , p=0.1966  , df_denom=114, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=1.8608  , p=0.1404  , df_denom=111, df_num=3\n",
      "ssr based chi2 test:   chi2=5.9346  , p=0.1148  , df=3\n",
      "likelihood ratio test: chi2=5.7902  , p=0.1223  , df=3\n",
      "parameter F test:         F=1.8608  , p=0.1404  , df_denom=111, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=1.6707  , p=0.1621  , df_denom=108, df_num=4\n",
      "ssr based chi2 test:   chi2=7.2395  , p=0.1238  , df=4\n",
      "likelihood ratio test: chi2=7.0244  , p=0.1346  , df=4\n",
      "parameter F test:         F=1.6707  , p=0.1621  , df_denom=108, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=1.8565  , p=0.1083  , df_denom=105, df_num=5\n",
      "ssr based chi2 test:   chi2=10.2549 , p=0.0683  , df=5\n",
      "likelihood ratio test: chi2=9.8267  , p=0.0803  , df=5\n",
      "parameter F test:         F=1.8565  , p=0.1083  , df_denom=105, df_num=5\n",
      "======================= Z_CARE =======================\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=7.2347  , p=0.0082  , df_denom=117, df_num=1\n",
      "ssr based chi2 test:   chi2=7.4202  , p=0.0064  , df=1\n",
      "likelihood ratio test: chi2=7.1998  , p=0.0073  , df=1\n",
      "parameter F test:         F=7.2347  , p=0.0082  , df_denom=117, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=3.9868  , p=0.0212  , df_denom=114, df_num=2\n",
      "ssr based chi2 test:   chi2=8.3234  , p=0.0156  , df=2\n",
      "likelihood ratio test: chi2=8.0452  , p=0.0179  , df=2\n",
      "parameter F test:         F=3.9868  , p=0.0212  , df_denom=114, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=2.9884  , p=0.0342  , df_denom=111, df_num=3\n",
      "ssr based chi2 test:   chi2=9.5306  , p=0.0230  , df=3\n",
      "likelihood ratio test: chi2=9.1653  , p=0.0272  , df=3\n",
      "parameter F test:         F=2.9884  , p=0.0342  , df_denom=111, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=2.8942  , p=0.0255  , df_denom=108, df_num=4\n",
      "ssr based chi2 test:   chi2=12.5416 , p=0.0137  , df=4\n",
      "likelihood ratio test: chi2=11.9139 , p=0.0180  , df=4\n",
      "parameter F test:         F=2.8942  , p=0.0255  , df_denom=108, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=2.6034  , p=0.0292  , df_denom=105, df_num=5\n",
      "ssr based chi2 test:   chi2=14.3806 , p=0.0134  , df=5\n",
      "likelihood ratio test: chi2=13.5566 , p=0.0187  , df=5\n",
      "parameter F test:         F=2.6034  , p=0.0292  , df_denom=105, df_num=5\n",
      "======================= Z_ANGRY =======================\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=2.2380  , p=0.1373  , df_denom=117, df_num=1\n",
      "ssr based chi2 test:   chi2=2.2954  , p=0.1298  , df=1\n",
      "likelihood ratio test: chi2=2.2737  , p=0.1316  , df=1\n",
      "parameter F test:         F=2.2380  , p=0.1373  , df_denom=117, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=0.9085  , p=0.4060  , df_denom=114, df_num=2\n",
      "ssr based chi2 test:   chi2=1.8967  , p=0.3874  , df=2\n",
      "likelihood ratio test: chi2=1.8818  , p=0.3903  , df=2\n",
      "parameter F test:         F=0.9085  , p=0.4060  , df_denom=114, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=0.8002  , p=0.4963  , df_denom=111, df_num=3\n",
      "ssr based chi2 test:   chi2=2.5519  , p=0.4660  , df=3\n",
      "likelihood ratio test: chi2=2.5247  , p=0.4708  , df=3\n",
      "parameter F test:         F=0.8002  , p=0.4963  , df_denom=111, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=1.2627  , p=0.2892  , df_denom=108, df_num=4\n",
      "ssr based chi2 test:   chi2=5.4716  , p=0.2422  , df=4\n",
      "likelihood ratio test: chi2=5.3476  , p=0.2535  , df=4\n",
      "parameter F test:         F=1.2627  , p=0.2892  , df_denom=108, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=1.0805  , p=0.3755  , df_denom=105, df_num=5\n",
      "ssr based chi2 test:   chi2=5.9686  , p=0.3093  , df=5\n",
      "likelihood ratio test: chi2=5.8201  , p=0.3241  , df=5\n",
      "parameter F test:         F=1.0805  , p=0.3755  , df_denom=105, df_num=5\n",
      "======================= Z_SAD =======================\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 1\n",
      "ssr based F test:         F=3.7127  , p=0.0564  , df_denom=117, df_num=1\n",
      "ssr based chi2 test:   chi2=3.8079  , p=0.0510  , df=1\n",
      "likelihood ratio test: chi2=3.7488  , p=0.0528  , df=1\n",
      "parameter F test:         F=3.7127  , p=0.0564  , df_denom=117, df_num=1\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 2\n",
      "ssr based F test:         F=5.8671  , p=0.0038  , df_denom=114, df_num=2\n",
      "ssr based chi2 test:   chi2=12.2489 , p=0.0022  , df=2\n",
      "likelihood ratio test: chi2=11.6587 , p=0.0029  , df=2\n",
      "parameter F test:         F=5.8671  , p=0.0038  , df_denom=114, df_num=2\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 3\n",
      "ssr based F test:         F=4.2184  , p=0.0073  , df_denom=111, df_num=3\n",
      "ssr based chi2 test:   chi2=13.4534 , p=0.0038  , df=3\n",
      "likelihood ratio test: chi2=12.7402 , p=0.0052  , df=3\n",
      "parameter F test:         F=4.2184  , p=0.0073  , df_denom=111, df_num=3\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 4\n",
      "ssr based F test:         F=3.4237  , p=0.0112  , df_denom=108, df_num=4\n",
      "ssr based chi2 test:   chi2=14.8358 , p=0.0051  , df=4\n",
      "likelihood ratio test: chi2=13.9679 , p=0.0074  , df=4\n",
      "parameter F test:         F=3.4237  , p=0.0112  , df_denom=108, df_num=4\n",
      "\n",
      "Granger Causality\n",
      "number of lags (no zero) 5\n",
      "ssr based F test:         F=3.5432  , p=0.0053  , df_denom=105, df_num=5\n",
      "ssr based chi2 test:   chi2=19.5717 , p=0.0015  , df=5\n",
      "likelihood ratio test: chi2=18.0856 , p=0.0028  , df=5\n",
      "parameter F test:         F=3.5432  , p=0.0053  , df_denom=105, df_num=5\n"
     ]
    }
   ],
   "source": [
    "#perform Granger-Causality test\n",
    "print('======================= Z_LIKE =======================')\n",
    "result = grangercausalitytests(df[['CLOSING_INDEX', 'LIKE']], maxlag=5)\n",
    "print('======================= Z_HAHA =======================')\n",
    "result = grangercausalitytests(df[['CLOSING_INDEX', 'HAHA']], maxlag=5)\n",
    "print('======================= Z_LOVE =======================')\n",
    "result = grangercausalitytests(df[['CLOSING_INDEX', 'LOVE']], maxlag=5)\n",
    "print('======================= Z_WOW========================')\n",
    "result = grangercausalitytests(df[['CLOSING_INDEX', 'WOW']], maxlag=5)\n",
    "print('======================= Z_CARE =======================')\n",
    "result = grangercausalitytests(df[['CLOSING_INDEX', 'CARE']], maxlag=5)\n",
    "print('======================= Z_ANGRY =======================')\n",
    "result = grangercausalitytests(df[['CLOSING_INDEX', 'ANGRY']], maxlag=5)\n",
    "print('======================= Z_SAD =======================')\n",
    "result = grangercausalitytests(df[['CLOSING_INDEX', 'SAD']], maxlag=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "311855c3-21f8-4c06-b87f-89b9c00eded1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:56:52.652305Z",
     "iopub.status.busy": "2022-04-18T04:56:52.651724Z",
     "iopub.status.idle": "2022-04-18T04:56:52.963710Z",
     "shell.execute_reply": "2022-04-18T04:56:52.963064Z",
     "shell.execute_reply.started": "2022-04-18T04:56:52.652277Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/tlyu0419/pyenvs/venv/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='DATE', ylabel='VALUE'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/tlyu0419/pyenvs/venv/lib/python3.8/site-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 8722 (\\N{MINUS SIGN}) missing from current font.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1202.4x595.44 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(16.7,8.27)})\n",
    "sent_df = df[['LIKE', 'CARE', 'SAD', 'CLOSING_INDEX']].stack().reset_index()\n",
    "sent_df.columns = ['DATE', 'TYPE', 'VALUE']\n",
    "sent_df['DATE'] = sent_df['DATE'].apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%d'))\n",
    "sns.lineplot('DATE', 'VALUE',data = sent_df, hue='TYPE')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85eff85c-e982-4f64-b107-92eb06b6ce8e",
   "metadata": {},
   "source": [
    "## 變數\n",
    "- Paper\n",
    "  - 1: 情感預測波動\n",
    "  - 2: 過去的股價+情感 預測今天的股價\n",
    "    - QA: 如何抓過去幾天的?\n",
    "    - Stock Prediction Using Twitter Sentiment Analysis\n",
    "  - 3: 預測股價還是預測波動\n",
    "-  To confirm the inverse dependence of other mood dimensions on TWSE we investigated a total of 7 different possibilities.\n",
    "   - Module 1: $D$\n",
    "   - Module 2: $D + LIKE$ \n",
    "   - Module 3: $D + CARE$\n",
    "   - Module 4: $D + SAD$\n",
    "   - Module 4: $D + LIKE + CARE + SAD$\n",
    "   - Module 5: $D + LIKE + CARE + SAD + HAHA + LOVE + WOW + ANGRY$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3b95de42-1166-479a-8a2e-63e0dce02e1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:57:18.957376Z",
     "iopub.status.busy": "2022-04-18T04:57:18.956802Z",
     "iopub.status.idle": "2022-04-18T04:57:18.978207Z",
     "shell.execute_reply": "2022-04-18T04:57:18.977408Z",
     "shell.execute_reply.started": "2022-04-18T04:57:18.957350Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-06-01</td>\n",
       "      <td>17162.38</td>\n",
       "      <td>28224.0</td>\n",
       "      <td>3022.0</td>\n",
       "      <td>230.0</td>\n",
       "      <td>473.0</td>\n",
       "      <td>194.0</td>\n",
       "      <td>481.0</td>\n",
       "      <td>224.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-06-02</td>\n",
       "      <td>17165.04</td>\n",
       "      <td>22951.0</td>\n",
       "      <td>709.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>310.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>94.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-06-03</td>\n",
       "      <td>17246.16</td>\n",
       "      <td>22127.0</td>\n",
       "      <td>1526.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>306.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>1486.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-06-04</td>\n",
       "      <td>17147.41</td>\n",
       "      <td>25506.0</td>\n",
       "      <td>1257.0</td>\n",
       "      <td>307.0</td>\n",
       "      <td>271.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-06-05</td>\n",
       "      <td>17115.66</td>\n",
       "      <td>12475.0</td>\n",
       "      <td>406.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>2022-03-28</td>\n",
       "      <td>17520.01</td>\n",
       "      <td>45144.0</td>\n",
       "      <td>4684.0</td>\n",
       "      <td>276.0</td>\n",
       "      <td>995.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>109.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>2022-03-29</td>\n",
       "      <td>17548.66</td>\n",
       "      <td>61967.0</td>\n",
       "      <td>4388.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>821.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>197.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>2022-03-30</td>\n",
       "      <td>17740.56</td>\n",
       "      <td>62775.0</td>\n",
       "      <td>6123.0</td>\n",
       "      <td>631.0</td>\n",
       "      <td>1495.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>775.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>17693.47</td>\n",
       "      <td>45174.0</td>\n",
       "      <td>6917.0</td>\n",
       "      <td>879.0</td>\n",
       "      <td>756.0</td>\n",
       "      <td>610.0</td>\n",
       "      <td>269.0</td>\n",
       "      <td>165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>2022-04-01</td>\n",
       "      <td>17625.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>305 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE  CLOSING_INDEX     LIKE    HAHA   LOVE     WOW   CARE  ANGRY  \\\n",
       "0    2021-06-01       17162.38  28224.0  3022.0  230.0   473.0  194.0  481.0   \n",
       "1    2021-06-02       17165.04  22951.0   709.0   98.0   310.0   50.0  104.0   \n",
       "2    2021-06-03       17246.16  22127.0  1526.0  203.0   306.0  103.0  266.0   \n",
       "3    2021-06-04       17147.41  25506.0  1257.0  307.0   271.0  117.0  138.0   \n",
       "4    2021-06-05       17115.66  12475.0   406.0   78.0   114.0   25.0   38.0   \n",
       "..          ...            ...      ...     ...    ...     ...    ...    ...   \n",
       "300  2022-03-28       17520.01  45144.0  4684.0  276.0   995.0  570.0   86.0   \n",
       "301  2022-03-29       17548.66  61967.0  4388.0  408.0   821.0  185.0   90.0   \n",
       "302  2022-03-30       17740.56  62775.0  6123.0  631.0  1495.0  242.0  266.0   \n",
       "303  2022-03-31       17693.47  45174.0  6917.0  879.0   756.0  610.0  269.0   \n",
       "304  2022-04-01       17625.59      NaN     NaN    NaN     NaN    NaN    NaN   \n",
       "\n",
       "        SAD  \n",
       "0     224.0  \n",
       "1      94.0  \n",
       "2    1486.0  \n",
       "3      63.0  \n",
       "4      27.0  \n",
       "..      ...  \n",
       "300   109.0  \n",
       "301   197.0  \n",
       "302   775.0  \n",
       "303   165.0  \n",
       "304     NaN  \n",
       "\n",
       "[305 rows x 9 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stock_price = pd.read_pickle('./stock_price_by_date.pickle')\n",
    "stock_price['DATE'] = stock_price['DATE'].apply(lambda x: x.strftime('%Y-%m-%d'))\n",
    "sentiment = pd.read_pickle('./sentiment_by_date.pickle')\n",
    "df = pd.merge(left=stock_price, right=sentiment, how='left', on='DATE')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "70ff98ba-4288-45fd-bbc5-50aa2ae32183",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:57:29.231005Z",
     "iopub.status.busy": "2022-04-18T04:57:29.230620Z",
     "iopub.status.idle": "2022-04-18T04:57:29.245568Z",
     "shell.execute_reply": "2022-04-18T04:57:29.244897Z",
     "shell.execute_reply.started": "2022-04-18T04:57:29.230987Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>2021-11-20</td>\n",
       "      <td>17810.9250</td>\n",
       "      <td>10021.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>2021-10-16</td>\n",
       "      <td>16743.3250</td>\n",
       "      <td>7422.0</td>\n",
       "      <td>199.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>2021-07-24</td>\n",
       "      <td>17488.2400</td>\n",
       "      <td>8398.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>2021-10-10</td>\n",
       "      <td>16507.2375</td>\n",
       "      <td>4145.0</td>\n",
       "      <td>429.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>2021-10-28</td>\n",
       "      <td>17041.6300</td>\n",
       "      <td>19709.0</td>\n",
       "      <td>544.0</td>\n",
       "      <td>157.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>2022-02-23</td>\n",
       "      <td>18055.7300</td>\n",
       "      <td>194632.0</td>\n",
       "      <td>18431.0</td>\n",
       "      <td>12406.0</td>\n",
       "      <td>2422.0</td>\n",
       "      <td>1160.0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>1701.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>275</th>\n",
       "      <td>2022-03-03</td>\n",
       "      <td>17934.4000</td>\n",
       "      <td>56799.0</td>\n",
       "      <td>10749.0</td>\n",
       "      <td>395.0</td>\n",
       "      <td>7038.0</td>\n",
       "      <td>493.0</td>\n",
       "      <td>524.0</td>\n",
       "      <td>2361.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>273</th>\n",
       "      <td>2022-03-01</td>\n",
       "      <td>17898.2500</td>\n",
       "      <td>60368.0</td>\n",
       "      <td>2061.0</td>\n",
       "      <td>1279.0</td>\n",
       "      <td>1288.0</td>\n",
       "      <td>406.0</td>\n",
       "      <td>322.0</td>\n",
       "      <td>2723.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>2022-03-13</td>\n",
       "      <td>17263.4650</td>\n",
       "      <td>55567.0</td>\n",
       "      <td>12248.0</td>\n",
       "      <td>3403.0</td>\n",
       "      <td>685.0</td>\n",
       "      <td>593.0</td>\n",
       "      <td>136.0</td>\n",
       "      <td>6237.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>2022-04-01</td>\n",
       "      <td>17625.5900</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>305 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE  CLOSING_INDEX      LIKE     HAHA     LOVE     WOW    CARE  \\\n",
       "172  2021-11-20     17810.9250   10021.0     50.0     56.0    51.0    15.0   \n",
       "137  2021-10-16     16743.3250    7422.0    199.0     78.0    45.0     5.0   \n",
       "53   2021-07-24     17488.2400    8398.0    133.0     32.0    29.0    13.0   \n",
       "131  2021-10-10     16507.2375    4145.0    429.0     27.0   128.0    16.0   \n",
       "149  2021-10-28     17041.6300   19709.0    544.0    157.0   110.0    36.0   \n",
       "..          ...            ...       ...      ...      ...     ...     ...   \n",
       "267  2022-02-23     18055.7300  194632.0  18431.0  12406.0  2422.0  1160.0   \n",
       "275  2022-03-03     17934.4000   56799.0  10749.0    395.0  7038.0   493.0   \n",
       "273  2022-03-01     17898.2500   60368.0   2061.0   1279.0  1288.0   406.0   \n",
       "285  2022-03-13     17263.4650   55567.0  12248.0   3403.0   685.0   593.0   \n",
       "304  2022-04-01     17625.5900       NaN      NaN      NaN     NaN     NaN   \n",
       "\n",
       "     ANGRY     SAD  \n",
       "172    6.0     1.0  \n",
       "137    5.0     3.0  \n",
       "53     8.0     3.0  \n",
       "131    4.0     3.0  \n",
       "149    5.0     3.0  \n",
       "..     ...     ...  \n",
       "267  252.0  1701.0  \n",
       "275  524.0  2361.0  \n",
       "273  322.0  2723.0  \n",
       "285  136.0  6237.0  \n",
       "304    NaN     NaN  \n",
       "\n",
       "[305 rows x 9 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values('SAD')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d0e1d485-2a54-4dae-baee-8c114ddc690d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:57:32.479433Z",
     "iopub.status.busy": "2022-04-18T04:57:32.479171Z",
     "iopub.status.idle": "2022-04-18T04:57:32.506685Z",
     "shell.execute_reply": "2022-04-18T04:57:32.505775Z",
     "shell.execute_reply.started": "2022-04-18T04:57:32.479415Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "      <th>L1D_CLOSING_INDEX</th>\n",
       "      <th>L2D_CLOSING_INDEX</th>\n",
       "      <th>N1D_CLOSING_INDEX</th>\n",
       "      <th>MOVEMENT</th>\n",
       "      <th>N1D_CLOSING_DIRE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>17585.9900</td>\n",
       "      <td>14756.0</td>\n",
       "      <td>916.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>451.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>17427.760</td>\n",
       "      <td>17328.090</td>\n",
       "      <td>17724.8800</td>\n",
       "      <td>138.8900</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-12-02</td>\n",
       "      <td>17724.8800</td>\n",
       "      <td>15399.0</td>\n",
       "      <td>1809.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>17585.990</td>\n",
       "      <td>17427.760</td>\n",
       "      <td>17697.1400</td>\n",
       "      <td>-27.7400</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-12-03</td>\n",
       "      <td>17697.1400</td>\n",
       "      <td>17064.0</td>\n",
       "      <td>1552.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>17724.880</td>\n",
       "      <td>17585.990</td>\n",
       "      <td>17692.6750</td>\n",
       "      <td>-4.4650</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-12-04</td>\n",
       "      <td>17692.6750</td>\n",
       "      <td>12484.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>17697.140</td>\n",
       "      <td>17724.880</td>\n",
       "      <td>17690.4425</td>\n",
       "      <td>-2.2325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-12-05</td>\n",
       "      <td>17690.4425</td>\n",
       "      <td>13906.0</td>\n",
       "      <td>586.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>17692.675</td>\n",
       "      <td>17697.140</td>\n",
       "      <td>17688.2100</td>\n",
       "      <td>-2.2325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>2022-03-27</td>\n",
       "      <td>17559.2450</td>\n",
       "      <td>71832.0</td>\n",
       "      <td>23247.0</td>\n",
       "      <td>453.0</td>\n",
       "      <td>1422.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>17598.480</td>\n",
       "      <td>17676.950</td>\n",
       "      <td>17520.0100</td>\n",
       "      <td>-39.2350</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>2022-03-28</td>\n",
       "      <td>17520.0100</td>\n",
       "      <td>45144.0</td>\n",
       "      <td>4684.0</td>\n",
       "      <td>276.0</td>\n",
       "      <td>995.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>17559.245</td>\n",
       "      <td>17598.480</td>\n",
       "      <td>17548.6600</td>\n",
       "      <td>28.6500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>2022-03-29</td>\n",
       "      <td>17548.6600</td>\n",
       "      <td>61967.0</td>\n",
       "      <td>4388.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>821.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>17520.010</td>\n",
       "      <td>17559.245</td>\n",
       "      <td>17740.5600</td>\n",
       "      <td>191.9000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>2022-03-30</td>\n",
       "      <td>17740.5600</td>\n",
       "      <td>62775.0</td>\n",
       "      <td>6123.0</td>\n",
       "      <td>631.0</td>\n",
       "      <td>1495.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>775.0</td>\n",
       "      <td>17548.660</td>\n",
       "      <td>17520.010</td>\n",
       "      <td>17693.4700</td>\n",
       "      <td>-47.0900</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>17693.4700</td>\n",
       "      <td>45174.0</td>\n",
       "      <td>6917.0</td>\n",
       "      <td>879.0</td>\n",
       "      <td>756.0</td>\n",
       "      <td>610.0</td>\n",
       "      <td>269.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>17740.560</td>\n",
       "      <td>17548.660</td>\n",
       "      <td>17625.5900</td>\n",
       "      <td>-67.8800</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>121 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE  CLOSING_INDEX     LIKE     HAHA   LOVE     WOW   CARE  ANGRY  \\\n",
       "0    2021-12-01     17585.9900  14756.0    916.0  117.0   451.0   40.0   46.0   \n",
       "1    2021-12-02     17724.8800  15399.0   1809.0   83.0   286.0   33.0   46.0   \n",
       "2    2021-12-03     17697.1400  17064.0   1552.0  171.0   193.0   48.0   20.0   \n",
       "3    2021-12-04     17692.6750  12484.0   1200.0   65.0   162.0   29.0   62.0   \n",
       "4    2021-12-05     17690.4425  13906.0    586.0   75.0   151.0   37.0   22.0   \n",
       "..          ...            ...      ...      ...    ...     ...    ...    ...   \n",
       "116  2022-03-27     17559.2450  71832.0  23247.0  453.0  1422.0  133.0   38.0   \n",
       "117  2022-03-28     17520.0100  45144.0   4684.0  276.0   995.0  570.0   86.0   \n",
       "118  2022-03-29     17548.6600  61967.0   4388.0  408.0   821.0  185.0   90.0   \n",
       "119  2022-03-30     17740.5600  62775.0   6123.0  631.0  1495.0  242.0  266.0   \n",
       "120  2022-03-31     17693.4700  45174.0   6917.0  879.0   756.0  610.0  269.0   \n",
       "\n",
       "       SAD  L1D_CLOSING_INDEX  L2D_CLOSING_INDEX  N1D_CLOSING_INDEX  MOVEMENT  \\\n",
       "0     45.0          17427.760          17328.090         17724.8800  138.8900   \n",
       "1    124.0          17585.990          17427.760         17697.1400  -27.7400   \n",
       "2     32.0          17724.880          17585.990         17692.6750   -4.4650   \n",
       "3     89.0          17697.140          17724.880         17690.4425   -2.2325   \n",
       "4     20.0          17692.675          17697.140         17688.2100   -2.2325   \n",
       "..     ...                ...                ...                ...       ...   \n",
       "116  113.0          17598.480          17676.950         17520.0100  -39.2350   \n",
       "117  109.0          17559.245          17598.480         17548.6600   28.6500   \n",
       "118  197.0          17520.010          17559.245         17740.5600  191.9000   \n",
       "119  775.0          17548.660          17520.010         17693.4700  -47.0900   \n",
       "120  165.0          17740.560          17548.660         17625.5900  -67.8800   \n",
       "\n",
       "     N1D_CLOSING_DIRE  \n",
       "0                   1  \n",
       "1                   0  \n",
       "2                   0  \n",
       "3                   0  \n",
       "4                   0  \n",
       "..                ...  \n",
       "116                 0  \n",
       "117                 1  \n",
       "118                 1  \n",
       "119                 0  \n",
       "120                 0  \n",
       "\n",
       "[121 rows x 14 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['L1D_CLOSING_INDEX'] = df['CLOSING_INDEX'].shift(1)\n",
    "df['L2D_CLOSING_INDEX'] = df['CLOSING_INDEX'].shift(2)\n",
    "df['N1D_CLOSING_INDEX'] = df['CLOSING_INDEX'].shift(-1)\n",
    "df['MOVEMENT'] = df['N1D_CLOSING_INDEX'] - df['CLOSING_INDEX']\n",
    "df['N1D_CLOSING_DIRE'] = df['MOVEMENT'].apply(lambda x: int(x > 0))\n",
    "df = df.loc[df['DATE'].apply(lambda x: '2021-12-01' <= x <= '2022-03-31')]\n",
    "# df = df.loc[df['DATE'].apply(lambda x: '2021-10-01' <= x <= '2022-03-31')]\n",
    "\n",
    "df = df.reset_index(drop=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "983dd79a-1d91-4455-8a52-ce92b5da07c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:58:03.024528Z",
     "iopub.status.busy": "2022-04-18T04:58:03.023859Z",
     "iopub.status.idle": "2022-04-18T04:58:03.058464Z",
     "shell.execute_reply": "2022-04-18T04:58:03.057425Z",
     "shell.execute_reply.started": "2022-04-18T04:58:03.024483Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/tlyu0419/pyenvs/venv/lib/python3.8/site-packages/sklearn/base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names unseen at fit time:\n",
      "- L1D_CLOSING_INDEX\n",
      "Feature names seen at fit time, yet now missing:\n",
      "- CLOSING_INDEX\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n",
      "/home/tlyu0419/pyenvs/venv/lib/python3.8/site-packages/sklearn/base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names unseen at fit time:\n",
      "- L2D_CLOSING_INDEX\n",
      "Feature names seen at fit time, yet now missing:\n",
      "- CLOSING_INDEX\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n",
      "/home/tlyu0419/pyenvs/venv/lib/python3.8/site-packages/sklearn/base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names unseen at fit time:\n",
      "- N1D_CLOSING_INDEX\n",
      "Feature names seen at fit time, yet now missing:\n",
      "- CLOSING_INDEX\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "      <th>L1D_CLOSING_INDEX</th>\n",
       "      <th>L2D_CLOSING_INDEX</th>\n",
       "      <th>N1D_CLOSING_INDEX</th>\n",
       "      <th>MOVEMENT</th>\n",
       "      <th>N1D_CLOSING_DIRE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>14756.0</td>\n",
       "      <td>916.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>451.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>-1.256256</td>\n",
       "      <td>-1.538719</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>138.8900</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-12-02</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>15399.0</td>\n",
       "      <td>1809.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-1.256256</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-27.7400</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-12-03</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>17064.0</td>\n",
       "      <td>1552.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-4.4650</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-12-04</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>12484.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.511819</td>\n",
       "      <td>-2.2325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-12-05</td>\n",
       "      <td>-0.511819</td>\n",
       "      <td>13906.0</td>\n",
       "      <td>586.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.518146</td>\n",
       "      <td>-2.2325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>2022-03-27</td>\n",
       "      <td>-0.883630</td>\n",
       "      <td>71832.0</td>\n",
       "      <td>23247.0</td>\n",
       "      <td>453.0</td>\n",
       "      <td>1422.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>-0.772439</td>\n",
       "      <td>-0.550057</td>\n",
       "      <td>-0.994822</td>\n",
       "      <td>-39.2350</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>2022-03-28</td>\n",
       "      <td>-0.994822</td>\n",
       "      <td>45144.0</td>\n",
       "      <td>4684.0</td>\n",
       "      <td>276.0</td>\n",
       "      <td>995.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>-0.883630</td>\n",
       "      <td>-0.772439</td>\n",
       "      <td>-0.913628</td>\n",
       "      <td>28.6500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>2022-03-29</td>\n",
       "      <td>-0.913628</td>\n",
       "      <td>61967.0</td>\n",
       "      <td>4388.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>821.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>-0.994822</td>\n",
       "      <td>-0.883630</td>\n",
       "      <td>-0.369787</td>\n",
       "      <td>191.9000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>2022-03-30</td>\n",
       "      <td>-0.369787</td>\n",
       "      <td>62775.0</td>\n",
       "      <td>6123.0</td>\n",
       "      <td>631.0</td>\n",
       "      <td>1495.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>775.0</td>\n",
       "      <td>-0.913628</td>\n",
       "      <td>-0.994822</td>\n",
       "      <td>-0.503239</td>\n",
       "      <td>-47.0900</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>-0.503239</td>\n",
       "      <td>45174.0</td>\n",
       "      <td>6917.0</td>\n",
       "      <td>879.0</td>\n",
       "      <td>756.0</td>\n",
       "      <td>610.0</td>\n",
       "      <td>269.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>-0.369787</td>\n",
       "      <td>-0.913628</td>\n",
       "      <td>-0.695610</td>\n",
       "      <td>-67.8800</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>121 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE  CLOSING_INDEX     LIKE     HAHA   LOVE     WOW   CARE  ANGRY  \\\n",
       "0    2021-12-01      -0.807836  14756.0    916.0  117.0   451.0   40.0   46.0   \n",
       "1    2021-12-02      -0.414224  15399.0   1809.0   83.0   286.0   33.0   46.0   \n",
       "2    2021-12-03      -0.492838  17064.0   1552.0  171.0   193.0   48.0   20.0   \n",
       "3    2021-12-04      -0.505492  12484.0   1200.0   65.0   162.0   29.0   62.0   \n",
       "4    2021-12-05      -0.511819  13906.0    586.0   75.0   151.0   37.0   22.0   \n",
       "..          ...            ...      ...      ...    ...     ...    ...    ...   \n",
       "116  2022-03-27      -0.883630  71832.0  23247.0  453.0  1422.0  133.0   38.0   \n",
       "117  2022-03-28      -0.994822  45144.0   4684.0  276.0   995.0  570.0   86.0   \n",
       "118  2022-03-29      -0.913628  61967.0   4388.0  408.0   821.0  185.0   90.0   \n",
       "119  2022-03-30      -0.369787  62775.0   6123.0  631.0  1495.0  242.0  266.0   \n",
       "120  2022-03-31      -0.503239  45174.0   6917.0  879.0   756.0  610.0  269.0   \n",
       "\n",
       "       SAD  L1D_CLOSING_INDEX  L2D_CLOSING_INDEX  N1D_CLOSING_INDEX  MOVEMENT  \\\n",
       "0     45.0          -1.256256          -1.538719          -0.414224  138.8900   \n",
       "1    124.0          -0.807836          -1.256256          -0.492838  -27.7400   \n",
       "2     32.0          -0.414224          -0.807836          -0.505492   -4.4650   \n",
       "3     89.0          -0.492838          -0.414224          -0.511819   -2.2325   \n",
       "4     20.0          -0.505492          -0.492838          -0.518146   -2.2325   \n",
       "..     ...                ...                ...                ...       ...   \n",
       "116  113.0          -0.772439          -0.550057          -0.994822  -39.2350   \n",
       "117  109.0          -0.883630          -0.772439          -0.913628   28.6500   \n",
       "118  197.0          -0.994822          -0.883630          -0.369787  191.9000   \n",
       "119  775.0          -0.913628          -0.994822          -0.503239  -47.0900   \n",
       "120  165.0          -0.369787          -0.913628          -0.695610  -67.8800   \n",
       "\n",
       "     N1D_CLOSING_DIRE  \n",
       "0                   1  \n",
       "1                   0  \n",
       "2                   0  \n",
       "3                   0  \n",
       "4                   0  \n",
       "..                ...  \n",
       "116                 0  \n",
       "117                 1  \n",
       "118                 1  \n",
       "119                 0  \n",
       "120                 0  \n",
       "\n",
       "[121 rows x 14 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "colsing_std = StandardScaler()\n",
    "colsing_std.fit(df[['CLOSING_INDEX']])\n",
    "df[['CLOSING_INDEX']] = colsing_std.transform(df[['CLOSING_INDEX']])\n",
    "df[['L1D_CLOSING_INDEX']] = colsing_std.transform(df[['L1D_CLOSING_INDEX']])\n",
    "df[['L2D_CLOSING_INDEX']] = colsing_std.transform(df[['L2D_CLOSING_INDEX']])\n",
    "df[['N1D_CLOSING_INDEX']] = colsing_std.transform(df[['N1D_CLOSING_INDEX']])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "89779322-0a9e-4109-a5b9-fa29414eb9ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T04:58:17.494928Z",
     "iopub.status.busy": "2022-04-18T04:58:17.494359Z",
     "iopub.status.idle": "2022-04-18T04:58:17.528948Z",
     "shell.execute_reply": "2022-04-18T04:58:17.528221Z",
     "shell.execute_reply.started": "2022-04-18T04:58:17.494904Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "      <th>L1D_CLOSING_INDEX</th>\n",
       "      <th>L2D_CLOSING_INDEX</th>\n",
       "      <th>N1D_CLOSING_INDEX</th>\n",
       "      <th>MOVEMENT</th>\n",
       "      <th>N1D_CLOSING_DIRE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-0.881824</td>\n",
       "      <td>-0.669657</td>\n",
       "      <td>-0.334230</td>\n",
       "      <td>-0.341884</td>\n",
       "      <td>-0.637723</td>\n",
       "      <td>-0.473810</td>\n",
       "      <td>-0.343242</td>\n",
       "      <td>-1.256256</td>\n",
       "      <td>-1.538719</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>138.8900</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-12-02</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.861455</td>\n",
       "      <td>-0.506706</td>\n",
       "      <td>-0.352323</td>\n",
       "      <td>-0.485300</td>\n",
       "      <td>-0.660525</td>\n",
       "      <td>-0.473810</td>\n",
       "      <td>-0.226670</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-1.256256</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-27.7400</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-12-03</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.808711</td>\n",
       "      <td>-0.553602</td>\n",
       "      <td>-0.305493</td>\n",
       "      <td>-0.566134</td>\n",
       "      <td>-0.611664</td>\n",
       "      <td>-0.624865</td>\n",
       "      <td>-0.362425</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-4.4650</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-12-04</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-0.953796</td>\n",
       "      <td>-0.617834</td>\n",
       "      <td>-0.361902</td>\n",
       "      <td>-0.593079</td>\n",
       "      <td>-0.673554</td>\n",
       "      <td>-0.380854</td>\n",
       "      <td>-0.278316</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.511819</td>\n",
       "      <td>-2.2325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-12-05</td>\n",
       "      <td>-0.511819</td>\n",
       "      <td>-0.908750</td>\n",
       "      <td>-0.729874</td>\n",
       "      <td>-0.356581</td>\n",
       "      <td>-0.602640</td>\n",
       "      <td>-0.647495</td>\n",
       "      <td>-0.613246</td>\n",
       "      <td>-0.380132</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.518146</td>\n",
       "      <td>-2.2325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>2022-03-27</td>\n",
       "      <td>-0.883630</td>\n",
       "      <td>0.926228</td>\n",
       "      <td>3.405226</td>\n",
       "      <td>-0.155423</td>\n",
       "      <td>0.502095</td>\n",
       "      <td>-0.334785</td>\n",
       "      <td>-0.520289</td>\n",
       "      <td>-0.242901</td>\n",
       "      <td>-0.772439</td>\n",
       "      <td>-0.550057</td>\n",
       "      <td>-0.994822</td>\n",
       "      <td>-39.2350</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>2022-03-28</td>\n",
       "      <td>-0.994822</td>\n",
       "      <td>0.080806</td>\n",
       "      <td>0.017914</td>\n",
       "      <td>-0.249616</td>\n",
       "      <td>0.130953</td>\n",
       "      <td>1.088697</td>\n",
       "      <td>-0.241419</td>\n",
       "      <td>-0.248804</td>\n",
       "      <td>-0.883630</td>\n",
       "      <td>-0.772439</td>\n",
       "      <td>-0.913628</td>\n",
       "      <td>28.6500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>2022-03-29</td>\n",
       "      <td>-0.913628</td>\n",
       "      <td>0.613725</td>\n",
       "      <td>-0.036099</td>\n",
       "      <td>-0.179370</td>\n",
       "      <td>-0.020286</td>\n",
       "      <td>-0.165400</td>\n",
       "      <td>-0.218179</td>\n",
       "      <td>-0.118951</td>\n",
       "      <td>-0.994822</td>\n",
       "      <td>-0.883630</td>\n",
       "      <td>-0.369787</td>\n",
       "      <td>191.9000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>2022-03-30</td>\n",
       "      <td>-0.369787</td>\n",
       "      <td>0.639320</td>\n",
       "      <td>0.280498</td>\n",
       "      <td>-0.060697</td>\n",
       "      <td>0.565545</td>\n",
       "      <td>0.020271</td>\n",
       "      <td>0.804345</td>\n",
       "      <td>0.733948</td>\n",
       "      <td>-0.913628</td>\n",
       "      <td>-0.994822</td>\n",
       "      <td>-0.503239</td>\n",
       "      <td>-47.0900</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>-0.503239</td>\n",
       "      <td>0.081757</td>\n",
       "      <td>0.425384</td>\n",
       "      <td>0.071279</td>\n",
       "      <td>-0.076783</td>\n",
       "      <td>1.218993</td>\n",
       "      <td>0.821774</td>\n",
       "      <td>-0.166170</td>\n",
       "      <td>-0.369787</td>\n",
       "      <td>-0.913628</td>\n",
       "      <td>-0.695610</td>\n",
       "      <td>-67.8800</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>121 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE  CLOSING_INDEX      LIKE      HAHA      LOVE       WOW  \\\n",
       "0    2021-12-01      -0.807836 -0.881824 -0.669657 -0.334230 -0.341884   \n",
       "1    2021-12-02      -0.414224 -0.861455 -0.506706 -0.352323 -0.485300   \n",
       "2    2021-12-03      -0.492838 -0.808711 -0.553602 -0.305493 -0.566134   \n",
       "3    2021-12-04      -0.505492 -0.953796 -0.617834 -0.361902 -0.593079   \n",
       "4    2021-12-05      -0.511819 -0.908750 -0.729874 -0.356581 -0.602640   \n",
       "..          ...            ...       ...       ...       ...       ...   \n",
       "116  2022-03-27      -0.883630  0.926228  3.405226 -0.155423  0.502095   \n",
       "117  2022-03-28      -0.994822  0.080806  0.017914 -0.249616  0.130953   \n",
       "118  2022-03-29      -0.913628  0.613725 -0.036099 -0.179370 -0.020286   \n",
       "119  2022-03-30      -0.369787  0.639320  0.280498 -0.060697  0.565545   \n",
       "120  2022-03-31      -0.503239  0.081757  0.425384  0.071279 -0.076783   \n",
       "\n",
       "         CARE     ANGRY       SAD  L1D_CLOSING_INDEX  L2D_CLOSING_INDEX  \\\n",
       "0   -0.637723 -0.473810 -0.343242          -1.256256          -1.538719   \n",
       "1   -0.660525 -0.473810 -0.226670          -0.807836          -1.256256   \n",
       "2   -0.611664 -0.624865 -0.362425          -0.414224          -0.807836   \n",
       "3   -0.673554 -0.380854 -0.278316          -0.492838          -0.414224   \n",
       "4   -0.647495 -0.613246 -0.380132          -0.505492          -0.492838   \n",
       "..        ...       ...       ...                ...                ...   \n",
       "116 -0.334785 -0.520289 -0.242901          -0.772439          -0.550057   \n",
       "117  1.088697 -0.241419 -0.248804          -0.883630          -0.772439   \n",
       "118 -0.165400 -0.218179 -0.118951          -0.994822          -0.883630   \n",
       "119  0.020271  0.804345  0.733948          -0.913628          -0.994822   \n",
       "120  1.218993  0.821774 -0.166170          -0.369787          -0.913628   \n",
       "\n",
       "     N1D_CLOSING_INDEX  MOVEMENT  N1D_CLOSING_DIRE  \n",
       "0            -0.414224  138.8900                 1  \n",
       "1            -0.492838  -27.7400                 0  \n",
       "2            -0.505492   -4.4650                 0  \n",
       "3            -0.511819   -2.2325                 0  \n",
       "4            -0.518146   -2.2325                 0  \n",
       "..                 ...       ...               ...  \n",
       "116          -0.994822  -39.2350                 0  \n",
       "117          -0.913628   28.6500                 1  \n",
       "118          -0.369787  191.9000                 1  \n",
       "119          -0.503239  -47.0900                 0  \n",
       "120          -0.695610  -67.8800                 0  \n",
       "\n",
       "[121 rows x 14 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for col in ['LIKE', 'HAHA', 'LOVE', 'WOW', 'CARE', 'ANGRY', 'SAD']:\n",
    "    std = StandardScaler()\n",
    "    df[col] = std.fit_transform(df[[col]])\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e11be68-a507-4239-a4f5-ccf2fd0d1d95",
   "metadata": {},
   "source": [
    "## 模型\n",
    "- Model\n",
    "  - Regression\n",
    "    - LR\n",
    "    - SVR\n",
    "    - MAP\n",
    "  - Classfication\n",
    "    - Logistic Regression\n",
    "    - SVM\n",
    "    - MAP\n",
    "    - SOFNN\n",
    "- KSVC"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43576993-6c03-4ce2-a246-2a3e9be8b36b",
   "metadata": {},
   "source": [
    "### Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5d334f3-637b-483d-88a6-7c0ec69187f0",
   "metadata": {},
   "source": [
    "#### N1D_CLOSING_INDEX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "463c291f-33b3-4139-89c5-b4864c5ee943",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:39.710032Z",
     "iopub.status.busy": "2022-04-18T05:07:39.709717Z",
     "iopub.status.idle": "2022-04-18T05:07:39.715086Z",
     "shell.execute_reply": "2022-04-18T05:07:39.714133Z",
     "shell.execute_reply.started": "2022-04-18T05:07:39.710009Z"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "module1 = ['L2D_CLOSING_INDEX', 'L1D_CLOSING_INDEX', 'CLOSING_INDEX']\n",
    "module2 = ['L2D_CLOSING_INDEX', 'L1D_CLOSING_INDEX', 'CLOSING_INDEX', 'LIKE']\n",
    "module3 = ['L2D_CLOSING_INDEX', 'L1D_CLOSING_INDEX', 'CLOSING_INDEX', 'CARE']\n",
    "module4 = ['L2D_CLOSING_INDEX', 'L1D_CLOSING_INDEX', 'CLOSING_INDEX', 'SAD']\n",
    "module5 = ['L2D_CLOSING_INDEX', 'L1D_CLOSING_INDEX', 'CLOSING_INDEX', 'LIKE', 'CARE', 'SAD']\n",
    "module6 = ['L2D_CLOSING_INDEX', 'L1D_CLOSING_INDEX', 'CLOSING_INDEX', 'LIKE', 'CARE', 'SAD', 'HAHA', 'LOVE', 'WOW', 'ANGRY']\n",
    "target = ['N1D_CLOSING_INDEX']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7f0780a5-8469-4467-9562-9192d4719837",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:40.069744Z",
     "iopub.status.busy": "2022-04-18T05:07:40.069083Z",
     "iopub.status.idle": "2022-04-18T05:07:40.075292Z",
     "shell.execute_reply": "2022-04-18T05:07:40.074408Z",
     "shell.execute_reply.started": "2022-04-18T05:07:40.069705Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['DATE', 'CLOSING_INDEX', 'LIKE', 'HAHA', 'LOVE', 'WOW', 'CARE', 'ANGRY',\n",
       "       'SAD', 'L1D_CLOSING_INDEX', 'L2D_CLOSING_INDEX', 'N1D_CLOSING_INDEX',\n",
       "       'MOVEMENT', 'N1D_CLOSING_DIRE'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d7e395ef-39c0-4e2f-b62e-776556a73138",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:47.197710Z",
     "iopub.status.busy": "2022-04-18T05:07:47.197299Z",
     "iopub.status.idle": "2022-04-18T05:07:47.202934Z",
     "shell.execute_reply": "2022-04-18T05:07:47.202242Z",
     "shell.execute_reply.started": "2022-04-18T05:07:47.197691Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(90, 14)\n",
      "(31, 14)\n"
     ]
    }
   ],
   "source": [
    "split_date = '2022-02-28'\n",
    "training = df.loc[df['DATE'] <= split_date]\n",
    "testing = df.loc[df['DATE'] > split_date]\n",
    "print(training.shape)\n",
    "print(testing.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "de357efa-cb01-4967-bf19-9cba5e536900",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:47.382209Z",
     "iopub.status.busy": "2022-04-18T05:07:47.381866Z",
     "iopub.status.idle": "2022-04-18T05:07:47.397042Z",
     "shell.execute_reply": "2022-04-18T05:07:47.396266Z",
     "shell.execute_reply.started": "2022-04-18T05:07:47.382189Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8247657250549724\n",
      "0.5377552926989231\n"
     ]
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "regressor.fit(training[module1], training[target])\n",
    "print(regressor.score(training[module1], training[target]))\n",
    "print(regressor.score(testing[module1], testing[target]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6ada38bd-c485-4c8f-ae47-7f7e820c55e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:47.537409Z",
     "iopub.status.busy": "2022-04-18T05:07:47.536814Z",
     "iopub.status.idle": "2022-04-18T05:07:47.551132Z",
     "shell.execute_reply": "2022-04-18T05:07:47.550149Z",
     "shell.execute_reply.started": "2022-04-18T05:07:47.537378Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8324064310269387\n",
      "0.577149297181325\n"
     ]
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "regressor.fit(training[module2], training[target])\n",
    "print(regressor.score(training[module2], training[target]))\n",
    "print(regressor.score(testing[module2], testing[target]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "71c2fe7d-176d-4360-a80c-cdca829aa409",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:47.705141Z",
     "iopub.status.busy": "2022-04-18T05:07:47.704500Z",
     "iopub.status.idle": "2022-04-18T05:07:47.717936Z",
     "shell.execute_reply": "2022-04-18T05:07:47.717047Z",
     "shell.execute_reply.started": "2022-04-18T05:07:47.705118Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8279936309830995\n",
      "0.592761523446129\n"
     ]
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "regressor.fit(training[module3], training[target])\n",
    "print(regressor.score(training[module3], training[target]))\n",
    "print(regressor.score(testing[module3], testing[target]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e7c82cc6-bcf4-44ea-995f-da025be9174e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:50.302925Z",
     "iopub.status.busy": "2022-04-18T05:07:50.302643Z",
     "iopub.status.idle": "2022-04-18T05:07:50.316851Z",
     "shell.execute_reply": "2022-04-18T05:07:50.316093Z",
     "shell.execute_reply.started": "2022-04-18T05:07:50.302907Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8316182991470321\n",
      "0.5252056267017035\n"
     ]
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "regressor.fit(training[module4], training[target])\n",
    "print(regressor.score(training[module4], training[target]))\n",
    "print(regressor.score(testing[module4], testing[target]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c4315032-702f-4d8d-95d2-353ea9b74401",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:51.072774Z",
     "iopub.status.busy": "2022-04-18T05:07:51.072407Z",
     "iopub.status.idle": "2022-04-18T05:07:51.086335Z",
     "shell.execute_reply": "2022-04-18T05:07:51.085433Z",
     "shell.execute_reply.started": "2022-04-18T05:07:51.072756Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8334627429147654\n",
      "0.5711699855227276\n"
     ]
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "regressor.fit(training[module5], training[target])\n",
    "print(regressor.score(training[module5], training[target]))\n",
    "print(regressor.score(testing[module5], testing[target]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "a8820012-54ff-4303-9266-c087bdb67e4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:07:51.902357Z",
     "iopub.status.busy": "2022-04-18T05:07:51.901786Z",
     "iopub.status.idle": "2022-04-18T05:07:51.916066Z",
     "shell.execute_reply": "2022-04-18T05:07:51.915145Z",
     "shell.execute_reply.started": "2022-04-18T05:07:51.902335Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8391809860192471\n",
      "0.5360391437071822\n"
     ]
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "regressor.fit(training[module6], training[target])\n",
    "print(regressor.score(training[module6], training[target]))\n",
    "print(regressor.score(testing[module6], testing[target]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "5c172a46-e010-4211-bfd4-a9c01baff3fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:11:12.441437Z",
     "iopub.status.busy": "2022-04-18T05:11:12.440193Z",
     "iopub.status.idle": "2022-04-18T05:11:12.460925Z",
     "shell.execute_reply": "2022-04-18T05:11:12.460083Z",
     "shell.execute_reply.started": "2022-04-18T05:11:12.441384Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>CLOSING_INDEX</th>\n",
       "      <th>LIKE</th>\n",
       "      <th>HAHA</th>\n",
       "      <th>LOVE</th>\n",
       "      <th>WOW</th>\n",
       "      <th>CARE</th>\n",
       "      <th>ANGRY</th>\n",
       "      <th>SAD</th>\n",
       "      <th>L1D_CLOSING_INDEX</th>\n",
       "      <th>L2D_CLOSING_INDEX</th>\n",
       "      <th>N1D_CLOSING_INDEX</th>\n",
       "      <th>MOVEMENT</th>\n",
       "      <th>N1D_CLOSING_DIRE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-0.881824</td>\n",
       "      <td>-0.669657</td>\n",
       "      <td>-0.334230</td>\n",
       "      <td>-0.341884</td>\n",
       "      <td>-0.637723</td>\n",
       "      <td>-0.473810</td>\n",
       "      <td>-0.343242</td>\n",
       "      <td>-1.256256</td>\n",
       "      <td>-1.538719</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>138.89000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-12-02</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.861455</td>\n",
       "      <td>-0.506706</td>\n",
       "      <td>-0.352323</td>\n",
       "      <td>-0.485300</td>\n",
       "      <td>-0.660525</td>\n",
       "      <td>-0.473810</td>\n",
       "      <td>-0.226670</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-1.256256</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-27.74000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-12-03</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.808711</td>\n",
       "      <td>-0.553602</td>\n",
       "      <td>-0.305493</td>\n",
       "      <td>-0.566134</td>\n",
       "      <td>-0.611664</td>\n",
       "      <td>-0.624865</td>\n",
       "      <td>-0.362425</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.807836</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-4.46500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-12-04</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-0.953796</td>\n",
       "      <td>-0.617834</td>\n",
       "      <td>-0.361902</td>\n",
       "      <td>-0.593079</td>\n",
       "      <td>-0.673554</td>\n",
       "      <td>-0.380854</td>\n",
       "      <td>-0.278316</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.414224</td>\n",
       "      <td>-0.511819</td>\n",
       "      <td>-2.23250</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-12-05</td>\n",
       "      <td>-0.511819</td>\n",
       "      <td>-0.908750</td>\n",
       "      <td>-0.729874</td>\n",
       "      <td>-0.356581</td>\n",
       "      <td>-0.602640</td>\n",
       "      <td>-0.647495</td>\n",
       "      <td>-0.613246</td>\n",
       "      <td>-0.380132</td>\n",
       "      <td>-0.505492</td>\n",
       "      <td>-0.492838</td>\n",
       "      <td>-0.518146</td>\n",
       "      <td>-2.23250</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>2022-02-24</td>\n",
       "      <td>-0.783577</td>\n",
       "      <td>1.636447</td>\n",
       "      <td>-0.320580</td>\n",
       "      <td>-0.203317</td>\n",
       "      <td>4.843677</td>\n",
       "      <td>0.792274</td>\n",
       "      <td>1.245889</td>\n",
       "      <td>0.217487</td>\n",
       "      <td>0.523399</td>\n",
       "      <td>0.278430</td>\n",
       "      <td>-0.620254</td>\n",
       "      <td>57.63000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>2022-02-25</td>\n",
       "      <td>-0.620254</td>\n",
       "      <td>2.713625</td>\n",
       "      <td>0.479033</td>\n",
       "      <td>0.456034</td>\n",
       "      <td>0.349987</td>\n",
       "      <td>1.192934</td>\n",
       "      <td>1.635145</td>\n",
       "      <td>0.853472</td>\n",
       "      <td>-0.783577</td>\n",
       "      <td>0.523399</td>\n",
       "      <td>-0.271575</td>\n",
       "      <td>123.03500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>2022-02-26</td>\n",
       "      <td>-0.271575</td>\n",
       "      <td>-0.235308</td>\n",
       "      <td>0.410969</td>\n",
       "      <td>-0.155423</td>\n",
       "      <td>-0.465309</td>\n",
       "      <td>2.948671</td>\n",
       "      <td>0.432518</td>\n",
       "      <td>0.912496</td>\n",
       "      <td>-0.620254</td>\n",
       "      <td>-0.783577</td>\n",
       "      <td>-0.097236</td>\n",
       "      <td>61.51750</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>2022-02-27</td>\n",
       "      <td>-0.097236</td>\n",
       "      <td>1.130994</td>\n",
       "      <td>-0.459262</td>\n",
       "      <td>0.011677</td>\n",
       "      <td>-0.160225</td>\n",
       "      <td>0.883481</td>\n",
       "      <td>-0.392473</td>\n",
       "      <td>0.041890</td>\n",
       "      <td>-0.271575</td>\n",
       "      <td>-0.620254</td>\n",
       "      <td>-0.010066</td>\n",
       "      <td>30.75875</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>2022-02-28</td>\n",
       "      <td>-0.010066</td>\n",
       "      <td>2.881645</td>\n",
       "      <td>1.458202</td>\n",
       "      <td>4.464291</td>\n",
       "      <td>0.110961</td>\n",
       "      <td>1.544733</td>\n",
       "      <td>-0.276277</td>\n",
       "      <td>-0.170597</td>\n",
       "      <td>-0.097236</td>\n",
       "      <td>-0.271575</td>\n",
       "      <td>0.077104</td>\n",
       "      <td>30.75875</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>90 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          DATE  CLOSING_INDEX      LIKE      HAHA      LOVE       WOW  \\\n",
       "0   2021-12-01      -0.807836 -0.881824 -0.669657 -0.334230 -0.341884   \n",
       "1   2021-12-02      -0.414224 -0.861455 -0.506706 -0.352323 -0.485300   \n",
       "2   2021-12-03      -0.492838 -0.808711 -0.553602 -0.305493 -0.566134   \n",
       "3   2021-12-04      -0.505492 -0.953796 -0.617834 -0.361902 -0.593079   \n",
       "4   2021-12-05      -0.511819 -0.908750 -0.729874 -0.356581 -0.602640   \n",
       "..         ...            ...       ...       ...       ...       ...   \n",
       "85  2022-02-24      -0.783577  1.636447 -0.320580 -0.203317  4.843677   \n",
       "86  2022-02-25      -0.620254  2.713625  0.479033  0.456034  0.349987   \n",
       "87  2022-02-26      -0.271575 -0.235308  0.410969 -0.155423 -0.465309   \n",
       "88  2022-02-27      -0.097236  1.130994 -0.459262  0.011677 -0.160225   \n",
       "89  2022-02-28      -0.010066  2.881645  1.458202  4.464291  0.110961   \n",
       "\n",
       "        CARE     ANGRY       SAD  L1D_CLOSING_INDEX  L2D_CLOSING_INDEX  \\\n",
       "0  -0.637723 -0.473810 -0.343242          -1.256256          -1.538719   \n",
       "1  -0.660525 -0.473810 -0.226670          -0.807836          -1.256256   \n",
       "2  -0.611664 -0.624865 -0.362425          -0.414224          -0.807836   \n",
       "3  -0.673554 -0.380854 -0.278316          -0.492838          -0.414224   \n",
       "4  -0.647495 -0.613246 -0.380132          -0.505492          -0.492838   \n",
       "..       ...       ...       ...                ...                ...   \n",
       "85  0.792274  1.245889  0.217487           0.523399           0.278430   \n",
       "86  1.192934  1.635145  0.853472          -0.783577           0.523399   \n",
       "87  2.948671  0.432518  0.912496          -0.620254          -0.783577   \n",
       "88  0.883481 -0.392473  0.041890          -0.271575          -0.620254   \n",
       "89  1.544733 -0.276277 -0.170597          -0.097236          -0.271575   \n",
       "\n",
       "    N1D_CLOSING_INDEX   MOVEMENT  N1D_CLOSING_DIRE  \n",
       "0           -0.414224  138.89000                 1  \n",
       "1           -0.492838  -27.74000                 0  \n",
       "2           -0.505492   -4.46500                 0  \n",
       "3           -0.511819   -2.23250                 0  \n",
       "4           -0.518146   -2.23250                 0  \n",
       "..                ...        ...               ...  \n",
       "85          -0.620254   57.63000                 1  \n",
       "86          -0.271575  123.03500                 1  \n",
       "87          -0.097236   61.51750                 1  \n",
       "88          -0.010066   30.75875                 1  \n",
       "89           0.077104   30.75875                 1  \n",
       "\n",
       "[90 rows x 14 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "edca2a3b-2628-4f03-a812-a593910c80bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T05:12:41.924852Z",
     "iopub.status.busy": "2022-04-18T05:12:41.924470Z",
     "iopub.status.idle": "2022-04-18T05:12:41.944363Z",
     "shell.execute_reply": "2022-04-18T05:12:41.943576Z",
     "shell.execute_reply.started": "2022-04-18T05:12:41.924816Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:      N1D_CLOSING_INDEX   R-squared:                       0.828\n",
      "Model:                            OLS   Adj. R-squared:                  0.820\n",
      "Method:                 Least Squares   F-statistic:                     102.3\n",
      "Date:                Mon, 18 Apr 2022   Prob (F-statistic):           1.17e-31\n",
      "Time:                        13:12:41   Log-Likelihood:                -17.165\n",
      "No. Observations:                  90   AIC:                             44.33\n",
      "Df Residuals:                      85   BIC:                             56.83\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=====================================================================================\n",
      "                        coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------\n",
      "L2D_CLOSING_INDEX    -0.0140      0.106     -0.131      0.896      -0.225       0.197\n",
      "L1D_CLOSING_INDEX    -0.1088      0.155     -0.704      0.483      -0.416       0.198\n",
      "CLOSING_INDEX         0.9967      0.107      9.309      0.000       0.784       1.210\n",
      "CARE                 -0.0544      0.043     -1.263      0.210      -0.140       0.031\n",
      "const                 0.0445      0.037      1.198      0.234      -0.029       0.118\n",
      "==============================================================================\n",
      "Omnibus:                       21.760   Durbin-Watson:                   1.977\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               48.217\n",
      "Skew:                          -0.842   Prob(JB):                     3.39e-11\n",
      "Kurtosis:                       6.166   Cond. No.                         9.21\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# statmodels\n",
    "training2 = training[module3]\n",
    "training2 = sm.add_constant(training2, prepend=False)\n",
    "\n",
    "# Fit and summarize OLS model\n",
    "mod = sm.OLS(training[target], training2)\n",
    "res = mod.fit()\n",
    "\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "120e7300-a95c-4f93-80a5-f094eb254c63",
   "metadata": {},
   "source": [
    "#### MOVEMENT\n",
    "- 練習改成預測變化的量"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6209c40-bde3-4197-8096-44079d8feb3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.loc[df['DATE'].apply(lambda x: '2021-12-01'<=x<='2022-02-28')]['N1D_CLOSING_DIRE'].value_counts()\n",
    "# df.loc[df['DATE'].apply(lambda x: '2022-03-01'<=x<='2022-03-31')]['N1D_CLOSING_DIRE'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c589e00-0948-42f8-a876-7265f1c23c7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reg = LinearRegression()\n",
    "# reg.fit(training[['LIKE']], training['MOVEMENT'])\n",
    "# print(reg.score(training[['LIKE']], training['MOVEMENT']))\n",
    "# print(reg.score(testing[['LIKE']], testing['MOVEMENT']))\n",
    "\n",
    "# training['PRED'] = reg.predict(training[['LIKE']])\n",
    "# print(mean_absolute_percentage_error(training[['LIKE']], training['PRED']))\n",
    "# testing['PRED']  = reg.predict(testing[['LIKE']])\n",
    "# print(mean_absolute_percentage_error(testing['MOVEMENT'], testing['PRED']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97a9180f-bcdd-4cc0-9a8f-34118646377e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# module1 = ['CLOSING_INDEX']\n",
    "# module2 = ['CLOSING_INDEX', 'LIKE']\n",
    "# module3 = ['CLOSING_INDEX', 'CARE']\n",
    "# module4 = ['CLOSING_INDEX', 'SAD']\n",
    "# module5 = ['CLOSING_INDEX', 'LIKE', 'CARE', 'SAD']\n",
    "# module6 = ['CLOSING_INDEX', 'LIKE', 'CARE', 'SAD', 'HAHA', 'LOVE', 'WOW', 'ANGRY']\n",
    "# target = ['N1D_CLOSING_INDEX']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7089db23-d085-4959-9955-6c5ac266330b",
   "metadata": {},
   "source": [
    "### Classification\n",
    "- 練習改成用分類模型，MOVEMENT_DIRECT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a19c2432-9af7-4105-b6e5-590301f7debd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "2b5df209-2f51-4014-822e-5eed6b13dc5e",
   "metadata": {},
   "source": [
    "## Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "1e77853e-f3be-4a11-96bb-26e98027f99e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-17T05:55:35.574236Z",
     "iopub.status.busy": "2022-04-17T05:55:35.573664Z",
     "iopub.status.idle": "2022-04-17T05:55:35.750495Z",
     "shell.execute_reply": "2022-04-17T05:55:35.749656Z",
     "shell.execute_reply.started": "2022-04-17T05:55:35.574213Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='DATE', ylabel='VALUE'>"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tmpdf = training[['DATE', 'N1D_CLOSING_INDEX', 'PRED']]\n",
    "tmpdf = tmpdf.set_index('DATE').stack().reset_index()\n",
    "tmpdf.columns = ['DATE', 'TYPE', 'VALUE']\n",
    "tmpdf['DATE'] = tmpdf['DATE'].apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%d'))\n",
    "sns.lineplot(x='DATE', y = 'VALUE', data=tmpdf, hue='TYPE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "95931019-9f9a-40a3-84c3-ee1a22ca2480",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-17T05:55:37.632968Z",
     "iopub.status.busy": "2022-04-17T05:55:37.632571Z",
     "iopub.status.idle": "2022-04-17T05:55:37.802889Z",
     "shell.execute_reply": "2022-04-17T05:55:37.802245Z",
     "shell.execute_reply.started": "2022-04-17T05:55:37.632945Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='DATE', ylabel='VALUE'>"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tmpdf = testing[['DATE', 'N1D_CLOSING_INDEX', 'PRED']]\n",
    "tmpdf = tmpdf.set_index('DATE').stack().reset_index()\n",
    "tmpdf.columns = ['DATE', 'TYPE', 'VALUE']\n",
    "tmpdf['DATE'] = tmpdf['DATE'].apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%d'))\n",
    "sns.lineplot(x='DATE', y = 'VALUE', data=tmpdf, hue='TYPE')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
